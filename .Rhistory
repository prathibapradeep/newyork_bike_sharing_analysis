panel.background = element_rect(fill = "white"),
panel.grid =  element_line(colour = "grey85", linetype = 1, size = 0.5),
axis.text = element_text(colour = "steelblue", face = "italic", size = 10 ),
axis.title = element_text(colour = "black" , face = "bold", size = 12),
axis.ticks = element_line(colour = "steelblue"),
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6)
)
}
#Pattern of bike hire within a year
nyc_bikes_df_rolling <- nyc_bikes_df %>%
index_by (date =  as_date(start_time)) %>%
summarise(no_of_bike_hire = n()) %>%
mutate(
bike_hire_moving_avg = slide_dbl(
.x = no_of_bike_hire,
.f = ~ mean(., na.rm = TRUE),
.before = 10,
.after = 10
)
)
ggplot(nyc_bikes_df_rolling) +
geom_line(aes(x = date, y = no_of_bike_hire), colour = "grey") +
geom_line(aes(x = date, y = bike_hire_moving_avg), colour = "blue")+
labs( x = "\nYear",
y = "Number of bike hire",
title = "Representation of Bike Hire within a Year\n") +
scale_x_date(date_breaks = "1 month", date_labels = "%b")+
color_theme()
#Pattern of bike hire over months
nyc_bikes_df_month <- nyc_bikes_df %>%
index_by (month) %>%
summarise(no_of_bike_hire = n()) %>%
ggplot(aes(x = month, y = no_of_bike_hire))+
geom_point(colour = "steelblue")+
geom_line(group = 1, colour = "blue") +
labs( x = "\nMonths",
y = "Number of bike hire",
title = "Representation of Bike Hire over months\n")+
color_theme()
nyc_bikes_df_month
#Pattern of bike hire within a month
nyc_bikes_df_days <- nyc_bikes_df %>%
filter (month %in% c("Jun","Jul","Aug")) %>%
index_by (date =  as_date(start_time)) %>%
mutate(no_of_bike_hire = n()) %>%
ggplot() +
aes(x = date, y = no_of_bike_hire) +
geom_line(colour = "steelblue") +
facet_grid(~month, scales = "free")+
labs( x = "\nDays",
y = "Number of bike hire",
title = "Representation of Bike Hire over Days" )+
scale_x_date(breaks = "1 week", date_labels = "%d")+
color_theme()+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
nyc_bikes_df_days
nyc_bikes_df %>%
filter (!(is.na(gender))) %>%
index_by(month) %>%
group_by(gender) %>%
mutate(no_of_bike_hire = n()) %>%
ggplot(aes(x = month, y = no_of_bike_hire)) +
geom_point(colour = "steelblue")+
geom_line(group = 1, colour = "steelblue") +
facet_grid(~gender ~ type)+
labs( x = "\nMonths",
y = "Number of bike hire",
title = "Representation of Bike Hire patterns based on Gender and Bike rider")+
color_theme()+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
nyc_bikes_df %>%
mutate (age = year(start_time) - birth_year) %>%
index_by(month) %>%
summarise(age_mean = mean(age)) %>%
ggplot(aes(x = month, y = age_mean)) +
geom_point(colour = "steelblue")+
geom_line(group = 1, colour = "steelblue") +
labs( x = "\nMonths",
y = "Age",
title = "Representation of Bike Hire patterns based on demographics",
subtitle = "(Data taken for the year 2018)")+
color_theme()+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
nyc_bikes_df_filtered <- nyc_bikes_df %>%
filter (month %in% c("Jun","Jul","Aug"))
nyc_bikes_df_map <- leaflet(nyc_bikes_df_filtered) %>%
addTiles() %>%
addMarkers(lng = ~start_long, lat = ~start_lat,
clusterOptions = markerClusterOptions())
nyc_bikes_df_map
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("knitr")
# install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
library(infer)
library(tidyverse)
library(e1071)
#Load the penguins data
penguins <- palmerpenguins::penguins
#Clean the data by removing the records with NA for the bill_length_mm
penguins <- penguins %>%
filter (!(is.na(bill_length_mm)))
penguins %>%
ggplot(aes(x = bill_length_mm)) +
geom_histogram(fill = "steelblue", col = "white", bins = 20) +
facet_wrap(~species)+
labs (x = "Bill length (mm)",
title = "Distribution of Bill Length across the three species of Penguin"  )
#Measures of Centrality : Mean & Median
penguins %>%
group_by (species) %>%
summarise(
mean = mean(bill_length_mm),
median = median(bill_length_mm))
#Measures of Spread : Range, IQR, Variance, Standard Deviation
penguins %>%
group_by(species) %>%
summarise(range = max(bill_length_mm) - min (bill_length_mm),
IQR = IQR(bill_length_mm),
variance = var(bill_length_mm),
standard_deviation = sd(bill_length_mm)
)
#Skewness
penguins %>%
group_by(species) %>%
summarise(skewness = skewness(bill_length_mm, type = 1))
#Filtering the data to keep the required dataset
penguins <- penguins %>%
filter( species != "Chinstrap")
#Re-Setting the factor levels
penguins <- penguins %>%
mutate(species = factor(species, levels = c("Gentoo","Adelie")))
#Check the sizes of both samples.
penguins %>%
group_by(species) %>%
summarise(n = n())
#Visualise the distributions
penguins %>%
ggplot(aes(y = bill_length_mm, x = species)) +
geom_boxplot(fill = "steelblue")+
coord_flip()+
labs (x = "Species",
y = "Bill Length (mm)",
title = "Representation of Species w.r.t Bill Length"  )
#Generate null distribution using permutation.
null_distribution <- penguins %>%
specify(bill_length_mm ~ species) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
#Calculate the observed statistics
observed_stat <- penguins %>%
specify(bill_length_mm ~ species) %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "greater")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
# install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
library(infer)
library(tidyverse)
library(e1071)
#Load the penguins data
penguins <- palmerpenguins::penguins
#Clean the data by removing the records with NA for the bill_length_mm
penguins <- penguins %>%
filter (!(is.na(bill_length_mm)))
penguins %>%
ggplot(aes(x = bill_length_mm)) +
geom_histogram(fill = "steelblue", col = "white", bins = 20) +
facet_wrap(~species)+
labs (x = "Bill length (mm)",
title = "Distribution of Bill Length across the three species of Penguin"  )
#Measures of Centrality : Mean & Median
penguins %>%
group_by (species) %>%
summarise(
mean = mean(bill_length_mm),
median = median(bill_length_mm))
#Measures of Spread : Range, IQR, Variance, Standard Deviation
penguins %>%
group_by(species) %>%
summarise(range = max(bill_length_mm) - min (bill_length_mm),
IQR = IQR(bill_length_mm),
variance = var(bill_length_mm),
standard_deviation = sd(bill_length_mm)
)
#Skewness
penguins %>%
group_by(species) %>%
summarise(skewness = skewness(bill_length_mm, type = 1))
#Filtering the data to keep the required dataset
penguins <- penguins %>%
filter( species != "Chinstrap")
#Re-Setting the factor levels
penguins <- penguins %>%
mutate(species = factor(species, levels = c("Gentoo","Adelie")))
#Check the sizes of both samples.
penguins %>%
group_by(species) %>%
summarise(n = n())
#Visualise the distributions
penguins %>%
ggplot(aes(y = bill_length_mm, x = species)) +
geom_boxplot(fill = "steelblue")+
coord_flip()+
labs (x = "Species",
y = "Bill Length (mm)",
title = "Representation of Species w.r.t Bill Length"  )
#Generate null distribution using permutation.
null_distribution <- penguins %>%
specify(bill_length_mm ~ species) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
#Calculate the observed statistics
observed_stat <- penguins %>%
specify(bill_length_mm ~ species) %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "greater")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
library(ggplot2)
library(tidyverse)
library(infer)
data(msleep)
summary(msleep)
head(msleep)
#Filtering the data to keep the required dataset (by removing NA's)
msleep_tidy <- msleep %>%
filter(!(is.na(sleep_total)))
#Visualise the distributions
msleep %>%
ggplot(aes(x = sleep_total)) +
geom_boxplot(fill = "steelblue")+
labs (x = "Total Sleep time (hrs)",
title = "Representation of animal's Total sleep hours"  )
#Generate null distribution using bootstrap
null_distribution <- msleep_tidy %>%
specify(response = sleep_total) %>%
hypothesize(null = "point", mu = 7) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
#Calculate the observed statistics
observed_stat <- msleep_tidy %>%
summarise(mean_rating = mean(sleep_total))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "both")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
p_value
#Filtering the data to keep the required dataset
msleep_omni_herbi <- msleep %>%
filter( vore %in% c("omni","herbi")) %>%
mutate (vore = recode(vore, "omni" = "Omnivores",
"herbi" = "Herbivores"))
#Check the sizes of both samples.
msleep_omni_herbi %>%
group_by(vore) %>%
summarise(n = n())
#Visualise the distributions
msleep_omni_herbi %>%
ggplot(aes(y = sleep_total, x = vore)) +
geom_boxplot(fill = "steelblue")+
labs (x = "Type of animal",
y = "Total Sleep time (hrs)",
title = "Representation of animal type w.r.t Total sleep hours"  )
#Generate null distribution using permutation.
null_distribution <- msleep_omni_herbi %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("Omnivores", "Herbivores"))
#Calculate the observed statistics
observed_stat <- msleep_omni_herbi %>%
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("Omnivores", "Herbivores"))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "greater")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
#Filtering the data to keep the required dataset
msleep_tidy <- msleep %>%
filter(!(is.na(conservation)))
# Setting the is_domesticated flag
msleep_tidy_prop <- msleep_tidy %>%
mutate(is_domesticated  = ifelse(conservation == "domesticated" , "Yes", "No"))
#Check the sizes of both samples.
msleep_tidy_prop %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep))
null_distribution <- msleep_tidy_prop %>%
specify(response = is_domesticated , success = "Yes") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
null_distribution %>%
visualise(bins = 10)
observed_stat <- msleep_tidy_prop %>%
specify(response = is_domesticated , success = "Yes") %>%
calculate(stat = "prop")
observed_stat
null_distribution %>%
visualise(bins = 10) +
shade_p_value(obs_stat = observed_stat, direction = "greater")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
# install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
library(infer)
library(tidyverse)
library(e1071)
#Load the penguins data
penguins <- palmerpenguins::penguins
#Clean the data by removing the records with NA for the bill_length_mm
penguins <- penguins %>%
filter (!(is.na(bill_length_mm)))
penguins %>%
ggplot(aes(x = bill_length_mm)) +
geom_histogram(fill = "steelblue", col = "white", bins = 20) +
facet_wrap(~species)+
labs (x = "Bill length (mm)",
title = "Distribution of Bill Length across the three species of Penguin"  )
#Measures of Centrality : Mean & Median
penguins %>%
group_by (species) %>%
summarise(
mean = mean(bill_length_mm),
median = median(bill_length_mm))
#Measures of Spread : Range, IQR, Variance, Standard Deviation
penguins %>%
group_by(species) %>%
summarise(range = max(bill_length_mm) - min (bill_length_mm),
IQR = IQR(bill_length_mm),
variance = var(bill_length_mm),
standard_deviation = sd(bill_length_mm)
)
#Skewness
penguins %>%
group_by(species) %>%
summarise(skewness = skewness(bill_length_mm, type = 1))
#Filtering the data to keep the required dataset
penguins <- penguins %>%
filter( species != "Chinstrap")
#Re-Setting the factor levels
penguins <- penguins %>%
mutate(species = factor(species, levels = c("Gentoo","Adelie")))
#Check the sizes of both samples.
penguins %>%
group_by(species) %>%
summarise(n = n())
#Visualise the distributions
penguins %>%
ggplot(aes(y = bill_length_mm, x = species)) +
geom_boxplot(fill = "steelblue")+
coord_flip()+
labs (x = "Species",
y = "Bill Length (mm)",
title = "Representation of Species w.r.t Bill Length"  )
#Generate null distribution using permutation.
null_distribution <- penguins %>%
specify(bill_length_mm ~ species) %>%
hypothesise(null = "independence") %>%
generate(reps = 25000, type = "permute") %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
#Calculate the observed statistics
observed_stat <- penguins %>%
specify(bill_length_mm ~ species) %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "greater")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
p_value
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
null_distribution <- penguins %>%
specify(bill_length_mm ~ species) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
#Calculate the observed statistics
observed_stat <- penguins %>%
specify(bill_length_mm ~ species) %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "greater")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
# install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
library(infer)
library(tidyverse)
library(e1071)
#Load the penguins data
penguins <- palmerpenguins::penguins
#Clean the data by removing the records with NA for the bill_length_mm
penguins <- penguins %>%
filter (!(is.na(bill_length_mm)))
penguins %>%
ggplot(aes(x = bill_length_mm)) +
geom_histogram(fill = "steelblue", col = "white", bins = 20) +
facet_wrap(~species)+
labs (x = "Bill length (mm)",
title = "Distribution of Bill Length across the three species of Penguin"  )
#Measures of Centrality : Mean & Median
penguins %>%
group_by (species) %>%
summarise(
mean = mean(bill_length_mm),
median = median(bill_length_mm))
#Measures of Spread : Range, IQR, Variance, Standard Deviation
penguins %>%
group_by(species) %>%
summarise(range = max(bill_length_mm) - min (bill_length_mm),
IQR = IQR(bill_length_mm),
variance = var(bill_length_mm),
standard_deviation = sd(bill_length_mm)
)
#Skewness
penguins %>%
group_by(species) %>%
summarise(skewness = skewness(bill_length_mm, type = 1))
#Filtering the data to keep the required dataset
penguins <- penguins %>%
filter( species != "Chinstrap")
#Re-Setting the factor levels
penguins <- penguins %>%
mutate(species = factor(species, levels = c("Gentoo","Adelie")))
#Check the sizes of both samples.
penguins %>%
group_by(species) %>%
summarise(n = n())
#Visualise the distributions
penguins %>%
ggplot(aes(y = bill_length_mm, x = species)) +
geom_boxplot(fill = "steelblue")+
coord_flip()+
labs (x = "Species",
y = "Bill Length (mm)",
title = "Representation of Species w.r.t Bill Length"  )
#Generate null distribution using permutation.
null_distribution <- penguins %>%
specify(bill_length_mm ~ species) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
#Calculate the observed statistics
observed_stat <- penguins %>%
specify(bill_length_mm ~ species) %>%
calculate(stat = "diff in means", order = c("Gentoo", "Adelie"))
observed_stat
#Visualise the p-value on the null distribution.
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "greater")
#Calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "greater")
p_value
